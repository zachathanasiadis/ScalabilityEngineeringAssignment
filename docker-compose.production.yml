networks:
  # Frontend network for load balancer
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # Backend network for apps and database
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

  # Worker network for background processing
  worker_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres_db_prod
    environment:
      - POSTGRES_DB=${DB_NAME:-task_queue_db}
      - POSTGRES_USER=${DB_USER:-nytrez}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres123}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
      - worker_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nytrez} -d ${DB_NAME:-task_queue_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    restart: unless-stopped

  # Load Balancer with rate limiting
  loadbalancer:
    build:
      context: .
      dockerfile: loadbalancer/Dockerfile
    container_name: lb_main
    ports:
      - "8000:8000"
    environment:
      - LB_STRATEGY=round_robin
      - RATE_LIMIT_REQUESTS=10
      - RATE_LIMIT_WINDOW=60
    depends_on:
      postgres:
        condition: service_healthy
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
      app3:
        condition: service_healthy
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/lb/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    restart: unless-stopped

  # App Instance Template
  app1: &app_template
    build: .
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  # Additional app instances
  app2:
    <<: *app_template
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432

  app3:
    <<: *app_template
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432

  # Worker Template
  worker1: &worker_template
    build: .
    command: python run_worker.py
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-1
    networks:
      - worker_net
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped

  worker2:
    <<: *worker_template
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-2

  worker3:
    <<: *worker_template
    environment:
      - DB_NAME=${DB_NAME:-task_queue_db}
      - DB_USER=${DB_USER:-nytrez}
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-3

volumes:
  postgres_data_prod:
    driver: local