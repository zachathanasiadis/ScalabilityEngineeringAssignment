services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_DB=${DB_NAME:-}
      - POSTGRES_USER=${DB_USER:-}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-} -d ${DB_NAME:-}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Load Balancer
  loadbalancer:
    build:
      context: .
      dockerfile: loadbalancer/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - LB_STRATEGY=round_robin
    depends_on:
      postgres:
        condition: service_healthy
      app1:
        condition: service_healthy
      app2:
        condition: service_healthy
      app3:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/lb/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App Instance 1
  app1:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - APP_NAME=hash-api-1
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App Instance 2
  app2:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - APP_NAME=hash-api-2
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App Instance 3
  app3:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - APP_NAME=hash-api-3
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker 1
  worker1:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python run_worker.py
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-1
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Worker 2
  worker2:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python run_worker.py
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-2
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Worker 3
  worker3:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: python run_worker.py
    environment:
      - DB_NAME=${DB_NAME:-}
      - DB_USER=${DB_USER:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - WORKER_NAME=worker-3
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-20}
      - DB_CONNECTION_RETRIES=${DB_CONNECTION_RETRIES:-5}
      - DB_BASE_BACKOFF=${DB_BASE_BACKOFF:-0.5}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local